generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  name       String?
  email      String?    @unique
  emailVerified DateTime?
  image      String?
  createdAt  DateTime   @default(now())

  accounts   Account[]
  sessions   Session[]
  posts      Post[]

  // ความสัมพันธ์กับ Board และ Task
  projects   Project[]  @relation("ProjectOwner")
  boards     Board[]    @relation("BoardOwner")    // ชื่อ relation ที่ตรงกัน
  tasks      Task[]     @relation("TaskAssignee")  // ชื่อ relation ที่ตรงกัน
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  createdAt DateTime @default(now())
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

// Kanban Entities
model Project {
  id        String  @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  ownerId   String // Project owner (User)

  owner  User   @relation("ProjectOwner",fields: [ownerId], references: [id], onDelete: Cascade)
  boards Board[]
}

model Board {
  id        String   @id @default(cuid())
  projectId String
  ownerId   String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  owner     User    @relation("BoardOwner", fields: [ownerId], references: [id], onDelete: Cascade) // opposite relation field
  columns   Column[]
}

model Column {
  id      String @id @default(cuid())
  name    String
  order   Int    // Used to maintain the order of columns
  boardId String

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks Task[]
}

model Task {
  id         String   @id @default(cuid())
  name       String?
  columnId   String
  assigneeId String?

  column     Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignee   User?  @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull) // opposite relation field
}